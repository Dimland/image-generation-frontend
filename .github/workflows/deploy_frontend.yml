name: Deploy Frontend

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend Docker image
        run: |
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          docker build -t dimland/image-generator-frontend:latest -t dimland/image-generator-frontend:$COMMIT_SHA ./
          docker push dimland/image-generator-frontend:latest 
          docker push dimland/image-generator-frontend:$COMMIT_SHA

      - name: Deploy frontend to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /opt/image-generator
            cd /opt/image-generator
            
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

            echo "Creating docker-compose.yml..."
            cat > docker-compose.yml << 'EOF'
            version: '3.4'
            services:
              backend:
                image: dimland/image-generator-backend:latest
                container_name: backend-container
                restart: always
                expose:
                  - "80"
                networks:
                  - my-net-devops

              frontend:
                image: dimland/image-generator-frontend:latest
                container_name: frontend-container
                restart: always
                expose:
                  - "80"
                networks:
                  - my-net-devops

              nginx:
                image: nginx:alpine
                container_name: nginx-container
                restart: always
                volumes:
                  - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
                ports:
                  - "8085:80"
                networks:
                  - my-net-devops
                depends_on:
                  - backend
                  - frontend

            networks:
              my-net-devops:
                driver: bridge
            EOF
            
            echo "Creating nginx configuration..."
            mkdir -p nginx
            cat > nginx/default.conf << 'EOF'
            server {
                listen 80;
                server_name localhost;

                location /api/ {
                    proxy_pass http://backend-container:8080;  # Порт 8080 для бэкенда
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_read_timeout 300s;
                    proxy_connect_timeout 75s;
                }

                location / {
                    proxy_pass http://frontend-container:80;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF

            if ! docker network ls | grep -q my-net-devops; then
              echo "Creating Docker network..."
              docker network create my-net-devops
            fi

            docker-compose pull frontend
            docker-compose up -d frontend
            docker-compose pull nginx
            docker-compose up -d nginx

            docker-compose restart nginx

            docker-compose ps
